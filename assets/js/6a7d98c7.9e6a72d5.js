"use strict";(self.webpackChunkethda_docs=self.webpackChunkethda_docs||[]).push([[4958],{9079:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>b,frontMatter:()=>a,metadata:()=>r,toc:()=>i});var o=t(5893),s=t(1151);const a={id:"upload-and-download-blobs",title:"",hide_table_of_contents:!1},d=void 0,r={id:"developers/upload-and-download-blobs",title:"",description:"This is for the upcoming devnet-2, and does NOT work with current devnet-1 yet. We are actively working to deliver it ASAP.",source:"@site/docs/developers/upload-and-download-blobs.md",sourceDirName:"developers",slug:"/developers/upload-and-download-blobs",permalink:"/developers/upload-and-download-blobs",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"upload-and-download-blobs",title:"",hide_table_of_contents:!1},sidebar:"mySidebar",previous:{title:"",permalink:"/developers/quick-start/using-ethda-faucet"},next:{title:"",permalink:"/developers/integrate-with-zkblob"}},l={},i=[{value:"Upload Blobs",id:"upload-blobs",level:2},{value:"Step 1: Encode data to blobs",id:"step-1-encode-data-to-blobs",level:3},{value:"Step 2: Query blob storage fee",id:"step-2-query-blob-storage-fee",level:3},{value:"Step 3: Construct and sign regular transactions",id:"step-3-construct-and-sign-regular-transactions",level:3},{value:"<code>to</code>",id:"to",level:4},{value:"<code>value</code>",id:"value",level:4},{value:"<code>data</code>",id:"data",level:4},{value:"Step 4: Send blob transaction &amp; blobs",id:"step-4-send-blob-transaction--blobs",level:3},{value:"Step 5: Query transaction status",id:"step-5-query-transaction-status",level:3},{value:"Download Blobs",id:"download-blobs",level:2}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["This is for the upcoming devnet-2, and does ",(0,o.jsx)(n.strong,{children:"NOT"})," work with current devnet-1 yet. We are actively working to deliver it ASAP."]})}),"\n",(0,o.jsx)(n.p,{children:"To submit data to EthDA, users submit blob transactions similar to blob-carrying-transactions introduced by EIP-4844. EthDA blob transactions contain two component, a standard ethereum regular transaction with blob commitments and one or more blobs of data."}),"\n",(0,o.jsx)(n.h2,{id:"upload-blobs",children:"Upload Blobs"}),"\n",(0,o.jsx)(n.h3,{id:"step-1-encode-data-to-blobs",children:"Step 1: Encode data to blobs"}),"\n",(0,o.jsx)(n.p,{children:"Encode raw data to blobs and compute KZG commitments, KZG proofs and versioned hashes."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["For blob encoding implementation in node.js, please refer to ",(0,o.jsx)(n.a,{href:"https://github.com/crustio/ethda-blobs/blob/main/src/utils/blobs.ts",children:"https://github.com/crustio/ethda-blobs/blob/main/src/utils/blobs.ts"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"step-2-query-blob-storage-fee",children:"Step 2: Query blob storage fee"}),"\n",(0,o.jsx)(n.p,{children:"Users could use the same execution api added by EIP-4844 to query the base fee per blob gas in wei:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"eth_blobBaseFee"})}),"\n",(0,o.jsx)(n.h3,{id:"step-3-construct-and-sign-regular-transactions",children:"Step 3: Construct and sign regular transactions"}),"\n",(0,o.jsx)(n.h4,{id:"to",children:(0,o.jsx)(n.code,{children:"to"})}),"\n",(0,o.jsx)(n.p,{children:"Should be a designated contract address (given later)"}),"\n",(0,o.jsx)(n.h4,{id:"value",children:(0,o.jsx)(n.code,{children:"value"})}),"\n",(0,o.jsx)(n.p,{children:"Blobs storage fee"}),"\n",(0,o.jsx)(n.h4,{id:"data",children:(0,o.jsx)(n.code,{children:"data"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JS",children:"{\n  originator,\n  description,\n  content_type,\n  extra,\n  blobs: [\n    {\n      content_type,\n      versioned_hash,  // required\n      kzg_commitment, // required\n      kzg_proof // required\n    },\n    {...}\n    ...\n  ]\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-4-send-blob-transaction--blobs",children:"Step 4: Send blob transaction & blobs"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JS",children:"{\n  to,\n  value,\n  data,\n  signature,\n  blobs,\n  blobVersionedHashes,\n  kzgCommitments,\n  kzgProofs\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-5-query-transaction-status",children:"Step 5: Query transaction status"}),"\n",(0,o.jsxs)(n.p,{children:["After a ",(0,o.jsx)(n.em,{children:"blob transaction"})," described above is submitted, users could then monitor transaction status. If transaction is successfully minted, it means specified blobs are successfully stored by EthDA's DAS network."]}),"\n",(0,o.jsx)(n.h2,{id:"download-blobs",children:"Download Blobs"}),"\n",(0,o.jsxs)(n.p,{children:["Blobs could be download via regular ",(0,o.jsx)(n.strong,{children:"eth_getTransactionByHash / eth_getTransactionByBlockHashAndIndex / eth_getTransactionByBlockNumberAndIndex"})," RPC interfaces."]})]})}function b(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>d});var o=t(7294);const s={},a=o.createContext(s);function d(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);